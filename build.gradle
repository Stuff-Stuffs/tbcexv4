plugins {
    id 'java'
    id 'fabric-loom' version '1.5.4' apply false
    id 'maven-publish'
}

def utilProjectPrefix = ":util"

def subprojectDeps(project, List<String> depNames) {
    project.dependencies {
        depNames.each {
            api project.dependencies.project(path: ":$it", configuration: 'namedElements')
        }

        depNames.each {
            clientImplementation findProject(":$it").sourceSets.client.output
        }
    }
}

allprojects {
    group = project.maven_group
    version = project.mod_version

    apply plugin: 'java'

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    if (project.path.startsWith(utilProjectPrefix)) {
        return
    }
    apply plugin: 'fabric-loom'

    repositories {
        mavenLocal()
        maven { url 'https://maven.wispforest.io' }
    }

    loom {
        splitEnvironmentSourceSets()
    }

    sourceSets {
        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }

        testmodClient {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
            compileClasspath += client.compileClasspath
            runtimeClasspath += client.runtimeClasspath

            compileClasspath += testmod.compileClasspath
            runtimeClasspath += testmod.runtimeClasspath
        }
    }

    loom {
        runs {
            testmodClient {
                client()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Client"
                source sourceSets.testmodClient
            }
            testmodServer {
                server()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Server"
                source sourceSets.testmod
            }
        }

        decompilers {
            vineflower {
                options.put("bsm", "1")
            }
        }
    }

    allprojects.each { p ->
        if (p.path.startsWith(utilProjectPrefix)) {
            return
        }
        loom.mods.register(p.name) {
            sourceSet p.sourceSets.main
            sourceSet p.sourceSets.client
        }

        loom.mods.register(p.name + "-testmod") {
            sourceSet p.sourceSets.testmod
            sourceSet p.sourceSets.testmodClient
        }
    }

    loom {
        runs {
            // This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
            datagen {
                inherit server
                name "Data Generation"
                vmArg "-Dfabric-api.datagen"
                vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
                vmArg "-Dfabric-api.datagen.modid=tbcexv4"

                runDir "build/datagen"
            }
            testmodClient {
                client()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Client"
                source sourceSets.testmodClient
            }
            testmodServer {
                server()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Server"
                source sourceSets.testmod
            }
        }
    }

    dependencies {
        implementation "org.jetbrains:annotations:24.1.0"
        annotationProcessor "io.github.stuff_stuffs:EventGen:1.46-SNAPSHOT"
        api project(":util")
        annotationProcessor project(":util")
        implementation "io.github.stuff_stuffs:EventGen:1.46-SNAPSHOT"
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        // Fabric API. This is technically optional, but you probably want it anyway.
        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

        testmodImplementation sourceSets.main.output
        testmodClientImplementation sourceSets.main.output
        testmodClientImplementation sourceSets.client.output
        testmodClientImplementation sourceSets.testmod.output
    }

    sourceSets {
        main {
            resources {
                srcDirs += [
                        'src/main/generated'
                ]
            }
        }
    }

    processResources {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }
}

base {
    archivesName = project.archives_base_name
}

dependencies {
    subprojects.each {
        if (!it.path.startsWith(utilProjectPrefix)) {
            api project(path: "${it.path}", configuration: "namedElements")
            clientImplementation project("${it.path}:").sourceSets.client.output

            testmodImplementation project("${it.path}:").sourceSets.testmod.output
            testmodClientImplementation project("${it.path}:").sourceSets.testmodClient.output
        } else {
            api project(path: "${it.path}")
        }

        include project(path: "${it.path}")
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

tasks.register("runAnnotationProcessors", JavaCompile) { task ->
    task.options.compilerArgs << '-proc:only'
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        mavenLocal()
    }
}